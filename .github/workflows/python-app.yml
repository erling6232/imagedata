# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 coverage setuptools build
        python -c "import configparser; c=configparser.ConfigParser(); c.read('setup.cfg'); print(c['options']['install_requires'])" > requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run Unit Tests and Generate Coverage Report
      run: |
        coverage run -m unittest discover tests -t .
        coverage report -m
        coverage xml
        coverage html
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        verbose: false
    - name: Archive code coverage html report
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: htmlcov
    - name: Build wheels
      # uses: pypa/cibuildwheel@v2.16.1
      env:
        # Skip 32-bit builds
        # Disable building PyPy wheels on all platforms
        # Skip all musllinux (manylinux only supported by itk-io)
        # CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *-musllinux*"
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        NPY_NO_DEPRECATED_API: "NPY_1_7_API_VERSION"
      run: |
        python -m build --wheel
