name: Build

on: [push, pull_request, release]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13]
        # os: [ubuntu-22.04, windows-2022, macos-11]

    steps:
      - name: Checkout imagedata
        uses: actions/checkout@v4

      - name: Add conda to system path
        run: |
          # $CONDA is an environment variable pointing to the root of the miniconda directory
          echo $CONDA/bin >> $GITHUB_PATH
          echo CONDA $CONDA
          echo GITHUB_PATH $GITHUB_PATH

      - name: GitHub
        run: |
          echo ${{github.event_name}} ${{github.event.action}}

      - name: Install dependencies
        run: |
          pip install --upgrade setuptools pip wheel
          pip install cython numpy flake8 coverage
          python -c "import configparser; c=configparser.ConfigParser(); c.read('setup.cfg'); print(c['options']['install_requires'])" > requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Build wheels
        # uses: pypa/cibuildwheel@v2.16.1
        env:
          # Skip 32-bit builds
          # Disable building PyPy wheels on all platforms
          # Skip all musllinux (manylinux only supported by itk-io)
          CIBW_SKIP: "*-win32 *-manylinux_i686 pp* *-musllinux*"
          NPY_NO_DEPRECATED_API: "NPY_1_7_API_VERSION"
          
        # with:
        #   package-dir: .
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"
        run: |
          mkdir -p imagedata
          find . -name '*.so' -o -name '*.c' -print
          find . -name '*.so' -o -name '*.c' -print0 | xargs -0 /bin/rm -f
          # python setup.py build_ext -i
          # bash build_tools/wheels/build_wheels.sh

      - name: Testing - prepare with coverage
        run: |
          python3 -m pip install coverage
      #- name: File list
      #  run: |
      #    pwd
      #    ls -lR
      - name: Testing - with Cython
        run: |
          # python3 -m pip install SimpleITK-SimpleElastix nipype
          coverage run -m unittest discover tests -t .
      - name: Testing - without Cython
        run: |
          # find . -name '*.so' | xargs rm
          # python3 -m pip install SimpleITK-SimpleElastix nipype
          coverage run -m unittest discover tests -t .
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install --upgrade pip wheel
          # pip install SimpleITK-SimpleElastix==2.0.0rc2.dev910

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz


#  publish-to-testpypi:
#    name: Test Publish Python distribution to TestPyPi
#    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    environment:
#      name: pypi
#      url: https://test.pypi.org/legacy
#    permissions:
#      id-token: write
#    # if: github.event_name == 'release' && github.event.action == 'published'
#    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
#    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          # unpacks default artifact into dist/
#          # if `name: artifact` is omitted, the action will create extra parent dir
#          name: artifact
#          path: dist
#
#      - name: Upload
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          repository-url: https://test.pypi.org/legacy/

          
  publish-to-pypi:
    name: Publish Python distribution to PyPi
    # if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      contents: read
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - name: Upload distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
